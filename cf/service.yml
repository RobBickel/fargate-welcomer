Parameters:
  Tag:
    Description: Docker image tag to Deploy
    Type: String
  Repository:
    Description: Name of ECR Repository that holds the Docker image.
    Type: String
  EnvironmentName:
    Description: Name of environment to deploy application in
    Type: String
  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /welcomer



Resources:
  MicroserviceLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}/${Repository}
      RetentionInDays: 7

  TaskExecutionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
              - Resource: "*"
                Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterTargets

  MicroserviceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
        RequiresCompatibilities: ["FARGATE"]
        NetworkMode: "awsvpc"
        Cpu: '256'
        Memory: '512'
        ExecutionRoleArn: !Ref TaskExecutionServiceRole
        ContainerDefinitions:
        -   Name: welcomer-service
            Cpu: '256'
            Essential: 'true'
            Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
            Memory: '512'
            PortMappings:
            - HostPort: 5000
              ContainerPort: 5000
            LogConfiguration:
              LogDriver: "awslogs"
              Options:
                awslogs-group: !Sub /ecs/${EnvironmentName}/${Repository}
                awslogs-region: !Sub ${AWS::Region}
                awslogs-stream-prefix: ecs
        Volumes: []

  ServiceDefinition:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-ClusterName"
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: "welcomer-service"
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Sub "${EnvironmentName}-ServiceSecurityGroup"
          Subnets:
            - Fn::ImportValue:
                !Sub "${EnvironmentName}-ServiceSubnetOne"
            - Fn::ImportValue:
                !Sub "${EnvironmentName}-ServiceSubnetTwo"
      ServiceName: welcomer-service
      TaskDefinition: !Ref MicroserviceTaskDefinition

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        Port: 80
        Protocol: HTTP
        Matcher:
            HttpCode: 200-299
        TargetType: ip
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: !Sub ${Path}/hello
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2


  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        ListenerArn:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-LoadBalancerListener"
        Priority: 2
        Conditions:
            - Field: path-pattern
              Values:
                - !Sub ${Path}/*
        Actions:
            - TargetGroupArn: !Ref TargetGroup
              Type: forward

